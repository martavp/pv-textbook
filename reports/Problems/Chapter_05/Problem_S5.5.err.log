Traceback (most recent call last):
  File "/home/marta/mambaforge/envs/mybooktest/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/marta/mambaforge/envs/mybooktest/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/marta/mambaforge/envs/mybooktest/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
  File "/home/marta/mambaforge/envs/mybooktest/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/marta/mambaforge/envs/mybooktest/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/marta/mambaforge/envs/mybooktest/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/marta/mambaforge/envs/mybooktest/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
plt.rc('font',family='Arial')
import math


DATA_SIZE = 1000   #Size of data
kB = 8.617333e-5
q = 1.6021766e-19 #eV

#Dopant diffusion data
D0 = 10.5 #cm2Â·s-1
Ea = 3.69 #eV

# Material carrier mobility
mu = 1500 #cm2/VÂ·s

# Wafer doping level
Nwafer = 1e16 #cm-3

# Process data: arrays of temperatures (K) and times (s)
# The first datapoint is for the predeposition step.
# The rest of datapoints are drive-in steps.
# In this exercise: 
#    predeposition (850 ÂºC, 5 min)
#    drive-in (1000 ÂºC, 10 min)

# Temperatures in C
T_list = np.array([850, 1000], dtype='double')  #ÂºC
# Times
time_list = np.array([300, 600], dtype='double')  #s
# Surface doping density
Ns = 3e20 #cm-3

### Plotting settings
# Max. depth to plot
depth = 0.5e-4# cm
# Define intermediate profiles to plot
# 1 means that the result of that diffusion step is plotted
plot_profile = [1, 1, 1]

########################
### Calculate profiles
########################

# Temperatures in K 
T_list += 273.15  #K

nSteps = len(T_list)

# Make array with constant base doping profile
Nbase = np.zeros((DATA_SIZE,2))
Nbase[:,0] = np.linspace(0, depth, DATA_SIZE)
Nbase[:,1] = Nwafer

# Make array for profiles calculated
Nx = np.zeros((DATA_SIZE,2))
Nx[:,0] = np.linspace(0, depth, DATA_SIZE)
# Array with depths in microns for plotting
depth_um = np.zeros((DATA_SIZE))
depth_um = Nx[:,0]*1e4

### 1. Predeposition
# First point in list of steps is assumed to be a predeposition
dif_coef = D0*math.exp(-Ea/(kB*T_list[0]))
print("Diffusion coefficient: " + f"{dif_coef:.3}"+" cm2/s")
dif_len = math.sqrt(4*dif_coef*time_list[0])
for x in range(DATA_SIZE):
    Nx[x,1] = Ns*math.erfc(Nx[x,0]/dif_len)

Qload = Ns*dif_len/math.sqrt(math.pi)
x_junc = dif_len*(math.erfc(Nwafer/Ns))**-1
Rsheet = 1/(q*mu*Qload)

# Print results
print("Q = "+f"{Qload:.3}"+" cm-3")
print("Junction depth predeposition: " + f"{x_junc*1e4:.3}"+" um")
print("Rsheet = "+f"{Rsheet:.3f}"+" ohm/sq")

# Plot results
fig = plt.figure(figsize=[5,4], tight_layout=True)
ax = fig.add_subplot()    
ax.set_xlabel('Depth ($\mu$m)', size=14)
ax.set_ylabel('phosphorus concentration \n N(x) (cm$^{-3}$)', size=14)
ax.set_yscale('log')
ax.set_ylim(Nwafer/10, Ns*10)
ax.set_xlim(0, depth*1e4)

plt.rc('xtick', labelsize=14) 
plt.rc('ytick', labelsize=14)

trace, = ax.plot(depth_um, Nbase[:,1], linestyle='-', color='#B31F20', label='Wafer doping' )

if plot_profile[0]==1:
    trace, = ax.plot(depth_um, Nx[:,1], linestyle='-', color='#498F34', label='Pre-deposition' )

# 2. Drive-in steps
# 
for x in range(nSteps-1):
    dif_len = 0
    for z in range(x+1):
        dif_coef = D0*math.exp(-Ea/(kB*T_list[z+1]))
        print("Diffusion coefficient: " + f"{dif_coef:.3}"+" cm2/s")
        dif_len += dif_coef*time_list[z+1]
    dif_len = 2*math.sqrt(dif_len)
    for y in range(DATA_SIZE):
        Nx[y,1] = (2/math.sqrt(math.pi))*(Qload/dif_len)*math.exp(-(Nx[y,0]/dif_len)**2) 

    surface_N = (2/math.sqrt(math.pi))*(Qload/dif_len)
    x_junc = dif_len*math.sqrt(math.log(surface_N/Nwafer))

        
    if plot_profile[x]==1:
        trace, = ax.plot(depth_um, Nx[:,1], linestyle='-', color='#4472C4', label='Drive-in '+str(x+1))  

# Plot junction position
trace, = ax.plot(x_junc*1e4, np.interp(x_junc,Nx[:,0],Nx[:,1]) , 'kx', markersize=10, label='Junction')  
# Print results of all drive-in steps
print("Ns: " + f"{surface_N:.3}"+" cm-3")
print("Total difussion length: " + f"{dif_len*1e4:.3}"+" um")
print("Junction depth: " + f"{x_junc*1e4:.3}"+" um")
        
ax.legend(fontsize=14)    


# Save figure
plt.savefig("fig_S5.5.png", dpi=300)

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 2[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m----> 2[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m      3[0m plt[38;5;241m.[39mrc([38;5;124m'[39m[38;5;124mfont[39m[38;5;124m'[39m,family[38;5;241m=[39m[38;5;124m'[39m[38;5;124mArial[39m[38;5;124m'[39m)
[1;32m      4[0m [38;5;28;01mimport[39;00m [38;5;21;01mmath[39;00m

[0;31mModuleNotFoundError[0m: No module named 'matplotlib'

